// <auto-generated />
using System;
using HasatEmlak.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HasatEmlak.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HasatEmlak.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Satılık emlaklar",
                            DisplayOrder = 1,
                            IconClass = "fas fa-home",
                            IsActive = true,
                            Name = "Satılık"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Kiralık emlaklar",
                            DisplayOrder = 2,
                            IconClass = "fas fa-key",
                            IsActive = true,
                            Name = "Kiralık"
                        });
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PlateCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "İstanbul",
                            PlateCode = "34"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "Ankara",
                            PlateCode = "06"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "İzmir",
                            PlateCode = "35"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            Name = "Antalya",
                            PlateCode = "07"
                        },
                        new
                        {
                            Id = 5,
                            IsActive = true,
                            Name = "Bursa",
                            PlateCode = "16"
                        });
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.ContactRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("ContactRequests");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            IsActive = true,
                            Name = "Beşiktaş"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 1,
                            IsActive = true,
                            Name = "Şişli"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 1,
                            IsActive = true,
                            Name = "Kadıköy"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 2,
                            IsActive = true,
                            Name = "Çankaya"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            IsActive = true,
                            Name = "Keçiören"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 3,
                            IsActive = true,
                            Name = "Konak"
                        },
                        new
                        {
                            Id = 7,
                            CityId = 3,
                            IsActive = true,
                            Name = "Karşıyaka"
                        });
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Neighborhoods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DistrictId = 1,
                            IsActive = true,
                            Name = "Levent"
                        },
                        new
                        {
                            Id = 2,
                            DistrictId = 1,
                            IsActive = true,
                            Name = "Etiler"
                        },
                        new
                        {
                            Id = 3,
                            DistrictId = 2,
                            IsActive = true,
                            Name = "Nişantaşı"
                        },
                        new
                        {
                            Id = 4,
                            DistrictId = 3,
                            IsActive = true,
                            Name = "Moda"
                        },
                        new
                        {
                            Id = 5,
                            DistrictId = 4,
                            IsActive = true,
                            Name = "Kızılay"
                        });
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<int?>("BathroomCount")
                        .HasColumnType("int");

                    b.Property<int?>("BuildingAge")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PropertyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RoomCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TotalFloors")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CityId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("PropertyTypeId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Çankaya, Ankara",
                            Area = 150,
                            BathroomCount = 2,
                            BuildingAge = 2,
                            CategoryId = 1,
                            CityId = 2,
                            CreatedDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Şehir manzaralı, merkezi konumda, yeni yapı lüks daire. Tüm sosyal olanaklar mevcut.",
                            DistrictId = 4,
                            FloorNumber = 5,
                            IsActive = true,
                            IsFeatured = true,
                            NeighborhoodId = 5,
                            Price = 2500000m,
                            PropertyTypeId = 1,
                            RoomCount = 3,
                            Title = "Çankaya'da Satılık Lüks Daire",
                            TotalFloors = 12
                        },
                        new
                        {
                            Id = 2,
                            Address = "Beşiktaş, İstanbul",
                            Area = 85,
                            BuildingAge = 5,
                            CategoryId = 2,
                            CityId = 1,
                            CreatedDate = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Metro yakını, modern ofis binasında kiralık ofis. Otopark dahil.",
                            DistrictId = 1,
                            FloorNumber = 3,
                            IsActive = true,
                            IsFeatured = false,
                            NeighborhoodId = 1,
                            Price = 15000m,
                            PropertyTypeId = 5,
                            Title = "Beşiktaş'ta Kiralık Ofis",
                            TotalFloors = 8
                        },
                        new
                        {
                            Id = 3,
                            Address = "Karşıyaka, İzmir",
                            Area = 300,
                            BathroomCount = 3,
                            BuildingAge = 3,
                            CategoryId = 1,
                            CityId = 3,
                            CreatedDate = new DateTime(2025, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deniz manzaralı, bahçeli, lüks villa. Kapalı otopark ve güvenlik mevcut.",
                            DistrictId = 7,
                            IsActive = true,
                            IsFeatured = true,
                            Price = 4500000m,
                            PropertyTypeId = 2,
                            RoomCount = 5,
                            Title = "İzmir Karşıyaka'da Villa",
                            TotalFloors = 2
                        });
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsMainImage")
                        .HasColumnType("bit");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.PropertyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PropertyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Residential apartments",
                            DisplayOrder = 1,
                            IconClass = "fas fa-building",
                            IsActive = true,
                            Name = "Daire"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Luxury villas",
                            DisplayOrder = 2,
                            IconClass = "fas fa-house-user",
                            IsActive = true,
                            Name = "Villa"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Land plots",
                            DisplayOrder = 3,
                            IconClass = "fas fa-mountain",
                            IsActive = true,
                            Name = "Arsa"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Commercial properties",
                            DisplayOrder = 4,
                            IconClass = "fas fa-store",
                            IsActive = true,
                            Name = "İşyeri"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Office spaces",
                            DisplayOrder = 5,
                            IconClass = "fas fa-briefcase",
                            IsActive = true,
                            Name = "Ofis"
                        });
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.ContactRequest", b =>
                {
                    b.HasOne("HasatEmlak.Models.Entities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.District", b =>
                {
                    b.HasOne("HasatEmlak.Models.Entities.City", "City")
                        .WithMany("Districts")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.Neighborhood", b =>
                {
                    b.HasOne("HasatEmlak.Models.Entities.District", "District")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.Property", b =>
                {
                    b.HasOne("HasatEmlak.Models.Entities.Category", "Category")
                        .WithMany("Properties")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HasatEmlak.Models.Entities.City", "City")
                        .WithMany("Properties")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HasatEmlak.Models.Entities.District", "District")
                        .WithMany("Properties")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HasatEmlak.Models.Entities.Neighborhood", "Neighborhood")
                        .WithMany("Properties")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HasatEmlak.Models.Entities.PropertyType", "PropertyType")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("District");

                    b.Navigation("Neighborhood");

                    b.Navigation("PropertyType");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.PropertyImage", b =>
                {
                    b.HasOne("HasatEmlak.Models.Entities.Property", "Property")
                        .WithMany("PropertyImages")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.Category", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.City", b =>
                {
                    b.Navigation("Districts");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.District", b =>
                {
                    b.Navigation("Neighborhoods");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.Neighborhood", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.Property", b =>
                {
                    b.Navigation("PropertyImages");
                });

            modelBuilder.Entity("HasatEmlak.Models.Entities.PropertyType", b =>
                {
                    b.Navigation("Properties");
                });
#pragma warning restore 612, 618
        }
    }
}
